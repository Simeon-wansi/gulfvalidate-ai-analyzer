import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { AnalysisResult } from "./ondemandApi";
import { downloadFile } from "@/utils/downloadUtils";

// Create a temporary, off-screen element to render the report for PDF generation
const createReportElement = (analysisResult: AnalysisResult): HTMLElement => {
  const container = document.createElement("div");
  container.style.position = "absolute";
  container.style.left = "-9999px";
  container.style.top = "0";
  container.style.width = "800px";
  container.style.padding = "40px";
  container.style.fontFamily = "sans-serif";
  container.style.color = "#333";
  container.style.backgroundColor = "#fff";

  // Header
  const header = `
    <div style="display: flex; justify-content: space-between; align-items: center; border-bottom: 2px solid #007BFF; padding-bottom: 20px; margin-bottom: 30px;">
      <h1 style="font-size: 28px; color: #007BFF; margin: 0;">GulfValidate Analysis Report</h1>
      <div style="text-align: right;">
        <p style="margin: 0; font-size: 14px;">${new Date().toLocaleDateString()}</p>
        <p style="margin: 0; font-size: 14px;">Overall Score: <strong>${analysisResult.overallScore}/100</strong></p>
      </div>
    </div>
  `;

  // Scores
  const scores = `
    <div style="margin-bottom: 30px;">
      <h2 style="font-size: 22px; border-bottom: 1px solid #ccc; padding-bottom: 10px; margin-bottom: 20px;">Dimension Scores</h2>
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
        ${Object.entries(analysisResult.scores)
          .map(([key, value]) => `
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px;">
              <p style="margin: 0; font-size: 16px; text-transform: capitalize;">${key.replace(/_/g, " ")}</p>
              <p style="margin: 0; font-size: 20px; font-weight: bold; color: #007BFF;">${value}/100</p>
            </div>
          `)
          .join("")}
      </div>
    </div>
  `;

  // Insights
  const insights = `
    <div>
      <h2 style="font-size: 22px; border-bottom: 1px solid #ccc; padding-bottom: 10px; margin-bottom: 20px;">Key Insights</h2>
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
        <div>
          <h3 style="font-size: 18px; color: #28a745; margin-bottom: 15px;">Strengths</h3>
          <ul style="list-style-type: disc; padding-left: 20px;">
            ${analysisResult.strengths.map(s => `<li style="margin-bottom: 10px;">${s}</li>`).join("")}
          </ul>
        </div>
        <div>
          <h3 style="font-size: 18px; color: #dc3545; margin-bottom: 15px;">Concerns</h3>
          <ul style="list-style-type: disc; padding-left: 20px;">
            ${analysisResult.concerns.map(c => `<li style="margin-bottom: 10px;">${c}</li>`).join("")}
          </ul>
        </div>
      </div>
      <div style="margin-top: 30px;">
        <h3 style="font-size: 18px; color: #17a2b8; margin-bottom: 15px;">Recommendations</h3>
        <ul style="list-style-type: disc; padding-left: 20px;">
          ${analysisResult.recommendations.map(r => `<li style="margin-bottom: 10px;">${r}</li>`).join("")}
        </ul>
      </div>
    </div>
  `;

  // Footer
  const footer = `
    <div style="border-top: 2px solid #007BFF; padding-top: 20px; margin-top: 40px; text-align: center; font-size: 12px; color: #6c757d;">
      <p>Generated by GulfValidate | AI-Powered Startup Validation for the GCC</p>
    </div>
  `;

  container.innerHTML = header + scores + insights + footer;
  return container;
};

export const generatePdf = async (analysisResult: AnalysisResult, fileName: string): Promise<void> => {
  const reportElement = createReportElement(analysisResult);
  document.body.appendChild(reportElement);

  try {
    const canvas = await html2canvas(reportElement, {
      scale: 2, // Higher scale for better quality
      useCORS: true,
    });

    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "px",
      format: [canvas.width, canvas.height],
    });

    pdf.addImage(imgData, "PNG", 0, 0, canvas.width, canvas.height);
    
    const pdfBlob = pdf.getBlob();
    downloadFile(pdfBlob, `${fileName}.pdf`, "application/pdf");

  } finally {
    document.body.removeChild(reportElement);
  }
};
